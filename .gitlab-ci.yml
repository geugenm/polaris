variables:
  GITLAB_CI_IMAGE_PYTHON: 'python:3.9'
  GITLAB_CI_PYPI_TOX: 'tox==3.14.5'
  GITLAB_CI_PYPI_TWINE: 'twine==3.1.1'
  GITLAB_CI_IMAGE_NODE: 'node:12.13.1'
stages:
  - static
  - build
  - test
  - integration
  - build_report_application
  - deploy

flake8:
  stage: static
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - apt-get update && apt-get install git-lfs
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - tox -e "flake8"
isort:
  stage: static
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - apt-get update && apt-get install git-lfs
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - tox -e "isort"
yapf:
  stage: static
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - apt-get update && apt-get install git-lfs
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - tox -e "yapf"
pylint:
  stage: static
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - apt-get update && apt-get install git-lfs
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - tox -e "pylint"
static_js_css:
  stage: static
  image: ${GITLAB_CI_IMAGE_NODE}
  script:
    - npm install -g prettier
    - prettier --check "./polaris/**/*.html"

build:
  stage: build
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - apt-get update && apt-get install git-lfs
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - rm -rf dist
    - tox -e "build"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - dist
test:
  stage: test
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - apt-get update && apt-get install git-lfs
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - tox -e "pytest"
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
integration:
  stage: integration
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - apt-get update && apt-get install git-lfs
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - tox -e "robot"
  artifacts:
    when: always
    paths:
      - robot/output
      - robot/gl.log
    expire_in: 1 week

build_report_application:
  stage: build_report_application
  image: node:latest
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - cd polaris/reports/application
    - yarn install
    - unset CI
    - yarn build
    - cd ../../../
  artifacts:
    paths:
      - polaris/reports/application/build/
  only:
    refs:
      - tags

deploy:
  stage: deploy
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - apt-get update && apt-get install git-lfs
    - pip install "$GITLAB_CI_PYPI_TWINE"
  script:
    - rm -rf dist
    - python setup.py bdist_wheel
    - twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" dist/*
  only:
    refs:
      - tags
    variables:
      - $PYPI_USERNAME
      - $PYPI_PASSWORD
