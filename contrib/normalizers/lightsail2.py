from collections import namedtuple

Field = namedtuple('Field', ['key', 'norm', 'desc'])

_NORMALIZERS = [
    Field('dest_callsign', lambda x: x, 'Destination Callsign'),
    Field('src_callsign', lambda x: x, 'Source Callsign'),
    Field('src_ssid', lambda x: x, 'Source SSID'),
    Field('dest_ssid', lambda x: x, 'Destination SSID'),
    Field('ctl', lambda x: x, 'CTL'),
    Field('pid', lambda x: x, 'PID'),
    Field('src_ip_addr', lambda x: x, 'Source IP Address'),
    Field('dst_ip_addr', lambda x: x, 'Destination IP Address'),
    Field('dst_ip_addr', lambda x: x, 'Destination IP Address'),
    Field('src_port', lambda x: x, 'Source port'),
    Field('dst_port', lambda x: x, 'Destination port'),
    Field('type', lambda x: x, 'Type is always 1'),
    Field('daughter_atmp', lambda x: x * 0.5 - 75,
          'Daughter Board A Temperature'),
    Field('daughter_btmp', lambda x: x * 0.5 - 75,
          'Daughter Board B Temperature'),
    Field('rf_amptmp', lambda x: x * 0.5 - 75, 'RF Amplifier Temperature'),
    Field('threev_pltmp', lambda x: x * 0.5 - 75, '3V3 Payload Temperature'),
    Field('atmelpwrcurr', lambda x: x / 2048, 'CPU Power Current'),
    Field('atmelpwrbusv', lambda x: x / 32, 'CPU Power Voltage'),
    Field('threev_pwrcurr', lambda x: x / 2048, '3V3 Power Current'),
    Field('threev_pwrbusv', lambda x: x / 32, '3V3 Power Voltage'),
    Field('threev_plpwrcurr', lambda x: x / 128, '3V3 Payload Current'),
    Field('threev_plpwrbusv', lambda x: x / 32, '3V3 Payload Voltage'),
    Field('fivev_plpwrcurr', lambda x: x / 128, '5V Payload Current'),
    Field('fivev_plpwrbusv', lambda x: x / 32, '5V Payload Voltage'),
    Field('daughter_apwrcurr', lambda x: x / 128,
          'Daughter Board A Power Current'),
    Field('daughter_apwrbusv', lambda x: x / 32,
          'Daughter Board A Power Voltage'),
    Field('daughter_bpwrcurr', lambda x: x / 128,
          'Daughter Board A Power Current'),
    Field('daughter_bpwrbusv', lambda x: x / 32,
          'Daughter Board B Power Voltage'),
    Field('nx_tmp', lambda x: x * 0.5 - 75, '-X Temperature'),
    Field('nx_intpwrcurr', lambda x: x / 64, '-X Int Power Current'),
    Field('nx_intpwrbusv', lambda x: x / 32, '-X Int Power Voltage'),
    Field('nx_extpwrcurr', lambda x: x / 64, '-X Ext Power Current'),
    Field('nx_extpwrbusv', lambda x: x / 32, '-X Ext Power Voltage'),
    Field('px_tmp', lambda x: x * 0.5 - 75, '+X Temperature'),
    Field('px_intpwrcurr', lambda x: x / 64, '+X Int Power Current'),
    Field('px_intpwrbusv', lambda x: x / 32, '+X Int Power Voltage'),
    Field('px_extpwrcurr', lambda x: x / 64, '+X Ext Power Current'),
    Field('px_extpwrbusv', lambda x: x / 32, '+X Ext Power Voltage'),
    Field('ny_tmp', lambda x: x * 0.5 - 75, '-Y Temperature'),
    Field('ny_intpwrcurr', lambda x: x / 64, '-Y Int Power Current'),
    Field('ny_intpwrbusv', lambda x: x / 32, '-Y Int Power Voltage'),
    Field('ny_extpwrcurr', lambda x: x / 64, '-Y Ext Power Current'),
    Field('ny_extpwrbusv', lambda x: x / 32, '-Y Ext Power Voltage'),
    Field('py_tmp', lambda x: x * 0.5 - 75, '+Y Temperature'),
    Field('py_intpwrcurr', lambda x: x / 64, '+Y Int Power Current'),
    Field('py_intpwrbusv', lambda x: x / 32, '+Y Int Power Voltage'),
    Field('py_extpwrcurr', lambda x: x / 64, '+Y Ext Power Current'),
    Field('py_extpwrbusv', lambda x: x / 32, '+Y Ext Power Voltage'),
    Field('nz_tmp', lambda x: x * 0.5 - 75, '-Z Temperature'),
    Field('nz_extpwrcurr', lambda x: x / 64, '-Z Ext Power Current'),
    Field('nz_extpwrbusv', lambda x: x / 32, '-Z Ext Power Voltage'),
    Field('pz_tmp', lambda x: x * 0.5 - 75, '+Z Temperature'),
    Field('usercputime', lambda x: x, 'User CPU Time'),
    Field('syscputime', lambda x: x, 'System CPU Time'),
    Field('idlecputime', lambda x: x, 'Idle CPU Time'),
    Field('processes', lambda x: x, 'Processes'),
    Field('memfree', lambda x: x, 'Memory Free'),
    Field('buffers', lambda x: x, 'Memory Buffered'),
    Field('cached', lambda x: x, 'Memory Cached'),
    Field('datafree', lambda x: x, 'Data Free'),
    Field('nanderasures', lambda x: x, 'NAND Erasure'),
    Field('beaconcnt', lambda x: x, 'Beacon Count'),
    Field('time', lambda x: x, 'RTC'),
    Field('boottime', lambda x: x, 'Boot Time'),
    Field('long_dur_counter', lambda x: x, 'Long Duration Counter'),
    Field('adcs_mode', lambda x: x, 'ADCS Mode'),
    Field('flags', lambda x: x, 'ADCS Flags'),
    Field('q0_act', lambda x: x / 128, 'Q0 Actuator'),
    Field('q1_act', lambda x: x / 128, 'Q1 Actuator'),
    Field('q2_act', lambda x: x / 128, 'Q2 Actuator'),
    Field('x_rate', lambda x: x / 128, 'X Rotation Rate'),
    Field('y_rate', lambda x: x / 128, 'Y Rotation Rate'),
    Field('z_rate', lambda x: x / 128, 'Z Rotation Rate'),
    Field('gyro_px', lambda x: x / 8, 'X Payload Gyro'),
    Field('gyro_py', lambda x: x / 8, 'Y Payload Gyro'),
    Field('gyro_pz', lambda x: x / 8, 'Z Payload Gyro'),
    Field('gyro_ix', lambda x: x / 8, 'X InternalGyro'),
    Field('gyro_iy', lambda x: x / 8, 'Y InternalGyro'),
    Field('gyro_piz', lambda x: x / 8, 'Z InternalGyro'),
    Field('sol_nxx', lambda x: x, '-X Solar Sensor X'),
    Field('sol_nxy', lambda x: x, '-X Solar Sensor Y'),
    Field('sol_pxx', lambda x: x, '+X Solar Sensor X'),
    Field('sol_pxy', lambda x: x, '+X Solar Sensor Y'),
    Field('sol_nyx', lambda x: x, '-Y Solar Sensor X'),
    Field('sol_nyy', lambda x: x, '-Y Solar Sensor Y'),
    Field('sol_pyx', lambda x: x, '+Y Solar Sensor X'),
    Field('sol_pyy', lambda x: x, '+Y Solar Sensor Y'),
    Field('sol_nzx', lambda x: x, '-Z Solar Sensor X'),
    Field('sol_nzy', lambda x: x, '-Z Solar Sensor Y'),
    Field('wheel_rpm', lambda x: x, 'Wheel RPM'),
    Field('cam0_status', lambda x: x, 'Camera 0 Status Bits'),
    Field('cam0_temp', lambda x: x * 0.5 - 75, 'Camera 0 Temperature'),
    Field('cam0_last_contact', lambda x: x,
          'Camera 0 Seconds Since Last Contact'),
    Field('cam0_pics_remaining', lambda x: x, 'Camera 0 Pics Remaining'),
    Field('cam0_retry_fails', lambda x: x, 'Camera 0 Retry Fails'),
    Field('cam1_status', lambda x: x, 'Camera 1 Status Bits'),
    Field('cam1_temp', lambda x: x * 0.5 - 75, 'Camera 1 Temperature'),
    Field('cam1_last_contact', lambda x: x,
          'Camera 1 Seconds Since Last Contact'),
    Field('cam1_pics_remaining', lambda x: x, 'Camera 1 Pics Remaining'),
    Field('cam1_retry_fails', lambda x: x, 'Camera 1 Retry Fails'),
    Field('torqx_pwrcurr', lambda x: x / 128, 'X Torquer Current'),
    Field('torqx_pwrbusv', lambda x: x / 16, 'X Torquer Voltage'),
    Field('torqy_pwrcurr', lambda x: x / 128, 'Y Torquer Current'),
    Field('torqy_pwrbusv', lambda x: x / 16, 'Y Torquer Voltage'),
    Field('torqz_pwrcurr', lambda x: x / 128, 'Z Torquer Current'),
    Field('torqz_pwrbusv', lambda x: x / 16, 'Z Torquer Voltage'),
    Field('motor_pwrcurr', lambda x: x / 128, 'Motor Current'),
    Field('motor_pwrbusv', lambda x: x / 16, 'Motor Voltage'),
    Field('pic_panel_flags', lambda x: x, 'Pic/Panel Flags'),
    Field('motor_cnt_high', lambda x: x, 'Motor Count High'),
    Field('motor_cnt_low', lambda x: x, 'Motor Count Low'),
    Field('motor_limit_high', lambda x: x, 'Motor Limit High'),
    Field('motor_limit_low', lambda x: x, 'Motor Limit Low'),
    Field('bat0_curr', lambda x: x / 128, 'Battery 0 Current'),
    Field('bat0_volt', lambda x: x / 32, 'Battery 0 Voltage'),
    Field('bat0_temp', lambda x: x * 0.5 - 75, 'Battery 0 Temperature'),
    Field('bat0_flags', lambda x: x, 'Battery 0 Flags'),
    Field('bat0_ctlflags', lambda x: x, 'Battery 0 Control Flags'),
    Field('bat1_curr', lambda x: x / 128, 'Battery 1 Current'),
    Field('bat1_volt', lambda x: x / 32, 'Battery 1 Voltage'),
    Field('bat1_temp', lambda x: x * 0.5 - 75, 'Battery 1 Temperature'),
    Field('bat1_flags', lambda x: x, 'Battery 1 Flags'),
    Field('bat1_ctlflags', lambda x: x, 'Battery 1 Control Flags'),
    Field('bat2_curr', lambda x: x / 128, 'Battery 2 Current'),
    Field('bat2_volt', lambda x: x / 32, 'Battery 2 Voltage'),
    Field('bat2_temp', lambda x: x * 0.5 - 75, 'Battery 2 Temperature'),
    Field('bat2_flags', lambda x: x, 'Battery 2 Flags'),
    Field('bat2_ctlflags', lambda x: x, 'Battery 2 Control Flags'),
    Field('bat3_curr', lambda x: x / 128, 'Battery 3 Current'),
    Field('bat3_volt', lambda x: x / 32, 'Battery 3 Voltage'),
    Field('bat3_temp', lambda x: x * 0.5 - 75, 'Battery 3 Temperature'),
    Field('bat3_flags', lambda x: x, 'Battery 3 Flags'),
    Field('bat3_ctlflags', lambda x: x, 'Battery 3 Control Flags'),
    Field('bat4_curr', lambda x: x / 128, 'Battery 4 Current'),
    Field('bat4_volt', lambda x: x / 32, 'Battery 4 Voltage'),
    Field('bat4_temp', lambda x: x * 0.5 - 75, 'Battery 4 Temperature'),
    Field('bat4_flags', lambda x: x, 'Battery 4 Flags'),
    Field('bat4_ctlflags', lambda x: x, 'Battery 4 Control Flags'),
    Field('bat5_curr', lambda x: x / 128, 'Battery 5 Current'),
    Field('bat5_volt', lambda x: x / 32, 'Battery 5 Voltage'),
    Field('bat5_temp', lambda x: x * 0.5 - 75, 'Battery 5 Temperature'),
    Field('bat5_flags', lambda x: x, 'Battery 5 Flags'),
    Field('bat5_ctlflags', lambda x: x, 'Battery 5 Control Flags'),
    Field('bat6_curr', lambda x: x / 128, 'Battery 6 Current'),
    Field('bat6_volt', lambda x: x / 32, 'Battery 6 Voltage'),
    Field('bat6_temp', lambda x: x * 0.5 - 75, 'Battery 6 Temperature'),
    Field('bat6_flags', lambda x: x, 'Battery 6 Flags'),
    Field('bat6_ctlflags', lambda x: x, 'Battery 6 Control Flags'),
    Field('bat7_curr', lambda x: x / 128, 'Battery 7 Current'),
    Field('bat7_volt', lambda x: x / 32, 'Battery 7 Voltage'),
    Field('bat7_temp', lambda x: x * 0.5 - 75, 'Battery 7 Temperature'),
    Field('bat7_flags', lambda x: x, 'Battery 7 Flags'),
    Field('bat7_ctlflags', lambda x: x, 'Battery 7 Control Flags'),
    Field('comm_rxcount', lambda x: x, 'RX Packets'),
    Field('comm_txcount', lambda x: x, 'TX Packets'),
    Field('comm_rxbytes', lambda x: x, 'RX Bytes'),
    Field('comm_txbytes', lambda x: x, 'TX Bytes'),
]


def decode(frame):
    for field in _NORMALIZERS:
        try:
            key = field.key
            val = frame[key]
            frame[key] = field.norm(val)  # normalize
        except KeyError as e:
            print('Field not found in the frame ', e)

    return frame
