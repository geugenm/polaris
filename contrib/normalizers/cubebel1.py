"""
Normalizer class for LightSail-2 satellite

Converts raw digit values, decoded by satnogs-decoders,  into
normalized ("Si") units using the equations provided in the telemetry
documentation.
"""
from contrib.normalizers.common import Field, Normalizer


class Cubebel1(Normalizer):
    """
    The class providing equations for the satellite telemetry
    """

    def __init__(self):
        super(Cubebel1, self).__init__()
        self.normalizers = [ # pylint: disable=R0801
            Field('dest_callsign', lambda x: x, None, 'Dest Callsign'),
            Field('src_callsign', lambda x: x, None, 'Src Callsign'),
            Field('src_ssid', lambda x: x, None, 'Src Ssid'),
            Field('dest_ssid', lambda x: x, None, 'Dest Ssid'),
            Field('ctl', lambda x: x, None, 'Ctl'),
            Field('pid', lambda x: x, None, 'Pid'),
            Field('hdr_rf_id', lambda x: x, None, 'Hdr Rf Id'),
            Field('hdr_opr_time', lambda x: x, None, 'Hdr Opr Time'),
            Field('hdr_reboot_cnt', lambda x: x, None, 'Hdr Reboot Cnt'),
            Field('hdr_mcusr', lambda x: x, None, 'Hdr Mcusr'),
            Field('hdr_pamp_temp', lambda x: x, None, 'Hdr Pamp Temp'),
            Field('hdr_pamp_voltage', lambda x: x, None, 'Hdr Pamp Voltage'),
            Field('hdr_tx_attenuator', lambda x: x, None, 'Hdr Tx Attenuator'),
            Field('hdr_battery_voltage', lambda x: x, None,
                  'Hdr Battery Voltage'),
            Field('hdr_system_voltage', lambda x: x, None,
                  'Hdr System Voltage'),
            Field('hdr_seq_number', lambda x: x, None, 'Hdr Seq Number'),
            Field('hdr_pwr_save_state', lambda x: x, None,
                  'Hdr Pwr Save State'),
            Field('hdr_modem_on_period', lambda x: x, None,
                  'Hdr Modem On Period'),
            Field('hdr_obc_can_status', lambda x: x, None,
                  'Hdr Obc Can Status'),
            Field('hdr_eps_can_status', lambda x: x, None,
                  'Hdr Eps Can Status'),
            Field('hdr_info_size', lambda x: x, None, 'Hdr Info Size'),
            Field('hdr_data_type', lambda x: x, None, 'Hdr Data Type'),
            Field('current_to_gamma', lambda x: x, None, 'Current To Gamma'),
            Field('current_to_irsensor', lambda x: x, None,
                  'Current To Irsensor'),
            Field('current_to_extflash', lambda x: x, None,
                  'Current To Extflash'),
            Field('current_to_solarsens', lambda x: x, None,
                  'Current To Solarsens'),
            Field('current_to_magnetcoils', lambda x: x, None,
                  'Current To Magnetcoils'),
            Field('current_to_coil_x', lambda x: x, None, 'Current To Coil X'),
            Field('current_to_coil_y', lambda x: x, None, 'Current To Coil Y'),
            Field('current_to_coil_pz', lambda x: x, None,
                  'Current To Coil Pz'),
            Field('current_to_coil_nz', lambda x: x, None,
                  'Current To Coil Nz'),
            Field('battery1_temp', lambda x: x, None, 'Battery1 Temp'),
            Field('battery2_temp', lambda x: x, None, 'Battery2 Temp'),
            Field('numb_oc_obc', lambda x: x, None, 'Numb Oc Obc'),
            Field('numb_oc_out_gamma', lambda x: x, None, 'Numb Oc Out Gamma'),
            Field('numb_oc_out_rf1', lambda x: x, None, 'Numb Oc Out Rf1'),
            Field('numb_oc_out_rf2', lambda x: x, None, 'Numb Oc Out Rf2'),
            Field('numb_oc_out_flash', lambda x: x, None, 'Numb Oc Out Flash'),
            Field('numb_oc_out_irsens', lambda x: x, None,
                  'Numb Oc Out Irsens'),
            Field('numb_oc_coil_x', lambda x: x, None, 'Numb Oc Coil X'),
            Field('numb_oc_coil_y', lambda x: x, None, 'Numb Oc Coil Y'),
            Field('numb_oc_coil_pz', lambda x: x, None, 'Numb Oc Coil Pz'),
            Field('numb_oc_coil_nz', lambda x: x, None, 'Numb Oc Coil Nz'),
            Field('numb_oc_magnetcoils', lambda x: x, None,
                  'Numb Oc Magnetcoils'),
            Field('numb_oc_solarsens', lambda x: x, None, 'Numb Oc Solarsens'),
            Field('reset_num', lambda x: x, None, 'Reset Num'),
            Field('reset_reason', lambda x: x, None, 'Reset Reason'),
            Field('pwr_sat', lambda x: x, None, 'Pwr Sat'),
            Field('pwr_rf1', lambda x: x, None, 'Pwr Rf1'),
            Field('pwr_rf2', lambda x: x, None, 'Pwr Rf2'),
            Field('pwr_sunsensor', lambda x: x, None, 'Pwr Sunsensor'),
            Field('pwr_gamma', lambda x: x, None, 'Pwr Gamma'),
            Field('pwr_irsensor', lambda x: x, None, 'Pwr Irsensor'),
            Field('pwr_flash', lambda x: x, None, 'Pwr Flash'),
            Field('pwr_magnet_x', lambda x: x, None, 'Pwr Magnet X'),
            Field('pwr_magnet_y', lambda x: x, None, 'Pwr Magnet Y'),
            Field('pwr_magnet_z', lambda x: x, None, 'Pwr Magnet Z'),
            Field('sys_time', lambda x: x, None, 'Sys Time'),
            Field('adc_correctness', lambda x: x, None, 'Adc Correctness'),
            Field('t_adc1', lambda x: x, None, 'T Adc1'),
            Field('t_adc2', lambda x: x, None, 'T Adc2'),
            Field('stepup_current', lambda x: x, None, 'Stepup Current'),
            Field('stepup_voltage', lambda x: x, None, 'Stepup Voltage'),
            Field('afterbq_current', lambda x: x, None, 'Afterbq Current'),
            Field('battery_voltage', lambda x: x, None, 'Battery Voltage'),
            Field('sys_voltage_50', lambda x: x, None, 'Sys Voltage 50'),
            Field('sys_voltage_33', lambda x: x, None, 'Sys Voltage 33'),
            Field('eps_uc_current', lambda x: x, None, 'Eps Uc Current'),
            Field('obc_uc_current', lambda x: x, None, 'Obc Uc Current'),
            Field('rf1_uc_current', lambda x: x, None, 'Rf1 Uc Current'),
            Field('rf2_uc_current', lambda x: x, None, 'Rf2 Uc Current'),
            Field('solar_voltage', lambda x: x, None, 'Solar Voltage'),
            Field('side_x_current', lambda x: x, None, 'Side X Current'),
            Field('side_py_current', lambda x: x, None, 'Side Py Current'),
            Field('side_ny_current', lambda x: x, None, 'Side Ny Current'),
            Field('side_pz_current', lambda x: x, None, 'Side Pz Current'),
            Field('side_nz_current', lambda x: x, None, 'Side Nz Current'),
        ]