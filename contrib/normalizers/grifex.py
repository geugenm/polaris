"""
Normalizer class for LightSail-2 satellite

Converts raw digit values, decoded by satnogs-decoders,  into
normalized ("Si") units using the equations provided in the telemetry
documentation.
"""
from contrib.normalizers.common import Field, Normalizer, int2ddn


class Grifex(Normalizer):
    """
    The class providing equations for the satellite telemetry
    """
    def __init__(self):
        super(Grifex, self).__init__()
        self.normalizers = [
            Field('dest_callsign', lambda x: x, None, 'Dest Callsign'),
            Field('src_callsign', lambda x: x, None, 'Src Callsign'),
            Field('src_ssid', lambda x: x, None, 'Src Ssid'),
            Field('dest_ssid', lambda x: x, None, 'Dest Ssid'),
            Field('ctl', lambda x: x, None, 'Ctl'),
            Field('pid', lambda x: x, None, 'Pid'),
            Field('primary_id', lambda x: x, None, 'Primary Id'),
            Field('secondary_id', lambda x: x, None, 'Secondary Id'),
            Field('flags', lambda x: x, None, 'Flags'),
            Field('packet_length', lambda x: x, None, 'Packet Length'),
            Field('header_checksum', lambda x: x, None, 'Header Checksum'),
            Field('spacecraft', lambda x: x, None, 'Spacecraft'),
            Field('rtc_unix_time', lambda x: x, None, 'Rtc Unix Time'),
            Field('numresets', lambda x: x, None, 'Numresets'),
            Field('avgnumactivetasks1', lambda x: x, None,
                  'Avgnumactivetasks1'),
            Field('avgnumactivetasks5', lambda x: x, None,
                  'Avgnumactivetasks5'),
            Field('avgnumactivetasks15', lambda x: x, None,
                  'Avgnumactivetasks15'),
            Field('curnumrunnabletasks', lambda x: x, None,
                  'Curnumrunnabletasks'),
            Field('totnumprocesses', lambda x: x, None, 'Totnumprocesses'),
            Field('lastprocesspid', lambda x: x, None, 'Lastprocesspid'),
            Field('totmem', lambda x: x, None, 'Totmem'),
            Field('freemem', lambda x: x, None, 'Freemem'),
            Field('adcs_enable_status', lambda x: x, None,
                  'Adcs Enable Status'),
            Field('sd_usage', lambda x: x, None, 'Sd Usage'),
            Field('datamnt_usage', lambda x: x, None, 'Datamnt Usage'),
            Field('lithium_op_count', lambda x: x, None, 'Lithium Op Count'),
            Field('lithium_msp430_temp', lambda x: x, None,
                  'Lithium Msp430 Temp'),
            Field('lithium_rssi', lambda x: x, None, 'Lithium Rssi'),
            Field('lithium_rx', lambda x: x, None, 'Lithium Rx'),
            Field('lithium_tx', lambda x: x, None, 'Lithium Tx'),
            Field('fcpu_temp_0', lambda x: x, None, 'Fcpu Temp 0'),
            Field('fcpu_temp_1', lambda x: x, None, 'Fcpu Temp 1'),
            Field('li_3v3_voltage', lambda x: x, None, 'Li 3V3 Voltage'),
            Field('fcpu_3v3_current', lambda x: x, None, 'Fcpu 3V3 Current'),
            Field('li_3v3_current', lambda x: x, None, 'Li 3V3 Current'),
            Field('fcpu_3v3_voltage', lambda x: x, None, 'Fcpu 3V3 Voltage'),
            Field('li_vbatt_voltage', lambda x: x, None, 'Li Vbatt Voltage'),
            Field('li_vbatt_current', lambda x: x, None, 'Li Vbatt Current'),
            Field('battery_voltage', lambda x: x, None, 'Battery Voltage'),
            Field('battery_current', lambda x: x, None, 'Battery Current'),
            Field('battery_temperature', lambda x: x, None,
                  'Battery Temperature'),
            Field('battery_bus_voltage', lambda x: x, None,
                  'Battery Bus Voltage'),
            Field('battery_bus_current', lambda x: x, None,
                  'Battery Bus Current'),
            Field('bus_voltage_5v', lambda x: x, None, 'Bus Voltage 5V'),
            Field('bus_current_5v', lambda x: x, None, 'Bus Current 5V'),
            Field('input_current_5v', lambda x: x, None, 'Input Current 5V'),
            Field('bus_voltage_3_3v', lambda x: x, None, 'Bus Voltage 3 3V'),
            Field('bus_current_3_3v', lambda x: x, None, 'Bus Current 3 3V'),
            Field('input_current_3_3v', lambda x: x, None,
                  'Input Current 3 3V'),
            Field('output_regulator_temperature', lambda x: x, None,
                  'Output Regulator Temperature'),
            Field('eps_5v_voltage', lambda x: x, None, 'Eps 5V Voltage'),
            Field('eps_5v_current', lambda x: x, None, 'Eps 5V Current'),
            Field('eps_3_3_voltage', lambda x: x, None, 'Eps 3 3 Voltage'),
            Field('eps_3_3v_current', lambda x: x, None, 'Eps 3 3V Current'),
            Field('channel_1_panel_voltage_b', lambda x: x, None,
                  'Channel 1 Panel Voltage B'),
            Field('channel_1_panel_current_b', lambda x: x, None,
                  'Channel 1 Panel Current B'),
            Field('channel_1_output_voltage', lambda x: x, None,
                  'Channel 1 Output Voltage'),
            Field('channel_1_output_current', lambda x: x, None,
                  'Channel 1 Output Current'),
            Field('channel_1_module_temperature', lambda x: x, None,
                  'Channel 1 Module Temperature'),
            Field('channel_1_board_temperature', lambda x: x, None,
                  'Channel 1 Board Temperature'),
            Field('channel_2_panel_voltage_b', lambda x: x, None,
                  'Channel 2 Panel Voltage B'),
            Field('channel_2_panel_current_b', lambda x: x, None,
                  'Channel 2 Panel Current B'),
            Field('channel_2_output_voltage', lambda x: x, None,
                  'Channel 2 Output Voltage'),
            Field('channel_2_output_current', lambda x: x, None,
                  'Channel 2 Output Current'),
            Field('channel_2_module_temperature', lambda x: x, None,
                  'Channel 2 Module Temperature'),
            Field('channel_2_board_temperature', lambda x: x, None,
                  'Channel 2 Board Temperature'),
            Field('channel_3_panel_voltage_b', lambda x: x, None,
                  'Channel 3 Panel Voltage B'),
            Field('channel_3_panel_current_b', lambda x: x, None,
                  'Channel 3 Panel Current B'),
            Field('channel_3_output_voltage', lambda x: x, None,
                  'Channel 3 Output Voltage'),
            Field('channel_3_output_current', lambda x: x, None,
                  'Channel 3 Output Current'),
            Field('channel_3_module_temperature', lambda x: x, None,
                  'Channel 3 Module Temperature'),
            Field('channel_3_board_temperature', lambda x: x, None,
                  'Channel 3 Board Temperature'),
            Field('channel_4_panel_voltage_b', lambda x: x, None,
                  'Channel 4 Panel Voltage B'),
            Field('channel_4_panel_current_b', lambda x: x, None,
                  'Channel 4 Panel Current B'),
            Field('channel_4_output_voltage', lambda x: x, None,
                  'Channel 4 Output Voltage'),
            Field('channel_4_output_current', lambda x: x, None,
                  'Channel 4 Output Current'),
            Field('channel_4_module_temperature', lambda x: x, None,
                  'Channel 4 Module Temperature'),
            Field('channel_4_board_temperature', lambda x: x, None,
                  'Channel 4 Board Temperature'),
            Field('eps_ioe_state', lambda x: x, None, 'Eps Ioe State'),
            Field('eps_ioe_mode', lambda x: x, None, 'Eps Ioe Mode'),
            Field('tcb_temp_0', lambda x: x, None, 'Tcb Temp 0'),
            Field('tcb_temp_1', lambda x: x, None, 'Tcb Temp 1'),
            Field('tcb_temp_2', lambda x: x, None, 'Tcb Temp 2'),
            Field('adcs1_ioe_state', lambda x: x, None, 'Adcs1 Ioe State'),
            Field('adcs1_ioe_mode', lambda x: x, None, 'Adcs1 Ioe Mode'),
            Field('posy_mag_x', lambda x: x, None, 'Posy Mag X'),
            Field('posy_mag_y', lambda x: x, None, 'Posy Mag Y'),
            Field('posy_mag_z', lambda x: x, None, 'Posy Mag Z'),
            Field('posx_mag_x', lambda x: x, None, 'Posx Mag X'),
            Field('posx_mag_y', lambda x: x, None, 'Posx Mag Y'),
            Field('posx_mag_z', lambda x: x, None, 'Posx Mag Z'),
            Field('negy_mag_x', lambda x: x, None, 'Negy Mag X'),
            Field('negy_mag_y', lambda x: x, None, 'Negy Mag Y'),
            Field('negy_mag_z', lambda x: x, None, 'Negy Mag Z'),
            Field('negx_mag_x', lambda x: x, None, 'Negx Mag X'),
            Field('negx_mag_y', lambda x: x, None, 'Negx Mag Y'),
            Field('negx_mag_z', lambda x: x, None, 'Negx Mag Z'),
            Field('posy_internal_temperature', lambda x: x, None,
                  'Posy Internal Temperature'),
            Field('posy_external_temperature', lambda x: x, None,
                  'Posy External Temperature'),
            Field('posx_internal_temperature', lambda x: x, None,
                  'Posx Internal Temperature'),
            Field('posx_external_temperature', lambda x: x, None,
                  'Posx External Temperature'),
            Field('negy_internal_temperature', lambda x: x, None,
                  'Negy Internal Temperature'),
            Field('negy_external_temperature', lambda x: x, None,
                  'Negy External Temperature'),
            Field('negx_internal_temperature', lambda x: x, None,
                  'Negx Internal Temperature'),
            Field('negx_external_temperature', lambda x: x, None,
                  'Negx External Temperature'),
            Field('posy_photodiode', lambda x: x, None, 'Posy Photodiode'),
            Field('posx_photodiode', lambda x: x, None, 'Posx Photodiode'),
            Field('negy_photodiode', lambda x: x, None, 'Negy Photodiode'),
            Field('negx_photodiode', lambda x: x, None, 'Negx Photodiode'),
            Field('mzint_ioe1_state', lambda x: x, None, 'Mzint Ioe1 State'),
            Field('mzint_ioe1_mode', lambda x: x, None, 'Mzint Ioe1 Mode'),
            Field('mzint_ioe2_state', lambda x: x, None, 'Mzint Ioe2 State'),
            Field('mzint_ioe2_mode', lambda x: x, None, 'Mzint Ioe2 Mode'),
            Field('marina_gpio_status_data', lambda x: x, None,
                  'Marina Gpio Status Data'),
            Field('marina_completed_runs', lambda x: x, None,
                  'Marina Completed Runs'),
            Field('marina_aborted_runs', lambda x: x, None,
                  'Marina Aborted Runs'),
            Field('marina_vbatt_voltage', lambda x: x, None,
                  'Marina Vbatt Voltage'),
            Field('marina_vbatt_current', lambda x: x, None,
                  'Marina Vbatt Current'),
            Field('marina_temperature', lambda x: x, None,
                  'Marina Temperature'),
            Field('marina_2_5v_voltage', lambda x: x, None,
                  'Marina 2 5V Voltage'),
            Field('marina_1_0v_voltage', lambda x: x, None,
                  'Marina 1 0V Voltage'),
            Field('marina_exit_status', lambda x: x, None,
                  'Marina Exit Status'),
            Field('variable_1', lambda x: x, None, 'Variable 1'),
            Field('variable_2', lambda x: x, None, 'Variable 2'),
            Field('variable_3', lambda x: x, None, 'Variable 3'),
            Field('variable_4', lambda x: x, None, 'Variable 4'),
            Field('variable_5', lambda x: x, None, 'Variable 5'),
            Field('variable_6', lambda x: x, None, 'Variable 6'),
            Field('variable_7', lambda x: x, None, 'Variable 7'),
            Field('variable_8', lambda x: x, None, 'Variable 8'),
            Field('variable_9', lambda x: x, None, 'Variable 9'),
            Field('variable_10', lambda x: x, None, 'Variable 10'),
        ]  # pylint: disable=R0801

    def validate_frame(self, frame):
        """ Validate frames for LightSail-2

            The source callsign for this satellite is KK6HIT. [citation needed]
        """
        try:
            return frame['fields']['spacecraft']['value'].lower() == 'grifex'
        except (KeyError, AttributeError):
            return False
