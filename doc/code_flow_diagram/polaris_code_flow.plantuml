@startuml
!define LIGHTBLUE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

'online generator:
'  - https://www.planttext.com
'  - http://www.plantuml.com/plantuml

' A good source for learning more about how to use plantUML https://deepu.js.org/svg-seq-diagram/Reference_Guide.pdf

title
  <b><color:gold>The Polaris Code Flow</b>
end title


class polaris{
Tool for analyzing satellite telemetry
  # cli()
  # cli_data_fetch()
  # cli_data_viz()
  # cli_learning()
}



class fetch.data_fetch_decoder{
Module for fetching and decoding telemetry data
  # build_decode_cmd()
  # build_start_and_end_dates()
  # data_decode()
  # data_fetch()
  # data_fetch_decode_normalize()
  # data_normalize()
  # find_satellite()
  # get_output_directory()
  # load_frames_from_json_file()
  # load_normalizer()
  # merge_csv_files()
}


class learn.analysis{
Module to launch different data analysis.
  # cross_correlate()
  # feature_extraction()
}

class learn.cross_correlation{
*class:**XCorr**
Cross Correlation module
  # importances_map()
  # fit()
  # transform() #unused
  # regression()
  # reset_importance_map()
}

class learn.extraction{
Utilities to extract features.
Selection from matrix of params and list of transformers
to get the list of most important features.
Flattening the features distribution using entropy
augmentation
  # create_list_of_transformers()
  # extract_best_features()
}

class learn.readers{
Helpers to incorporate data from different
sources. General input standard format
for functions in polaris learn are Pandas
Dataframe.
  # normalize_dataframe()
  # read_polaris_data()
  # records_from_satnogs_frames()
}

class learn.selection{
*class:**FeatureImportanceOptimization**
Module for flattening feature importance distribution from xgboost.
  # anti_collision_renaming()
  # build_pipelines()
  # extract_feature_importance()
  # filter_importances()
  # **find_gap()**
  # fit()
  # importances_distribution_spread()
  # transform() #unused

}

class learn.writers{
Helpers to write data file as
input for different targets.
  # heatmap_to_graph()

}


class viz.server{
Module to prepare and serve
data for visualization
  # launch_webserver()
}



'=================================================================================================================================
'The dataset department is included here but could not be displayed be the online generator and therefore not fully implemented yet

class dataset.dataset{
This module holds the PolarisDataset class
**PolarisDataset**
}


class dataset.frame{
This module holds the PolarisFrame class
*class**PolarisFrame**
}


class dataset.metadata{
This module holds the PolarisMetadata class
*class**PolarisMetadata**
}

fetch.data_fetch_decoder <.. dataset.dataset : <b>PolarisDataset</b>
dataset.dataset <.up. dataset.frame : <b>PolarisFrame</b>
dataset.dataset <..up.. dataset.metadata : <b>PolarisMetadata</b>


'=================================================================================================================================
'=================================================================================================================================
'Code Dependencies in polaris:
' <source where code is used> <arrow> <source of the code> : <explaination/function or file name>


'_______Strucure_Dependencies_______
'polaris <|-- fetch
'polaris <|-- learn
'polaris <|-left- viz


'_______Start_and_End______________
fetch.data_fetch_decoder <.down. terminal #line:red :<color:red>cli: satellite \n<color:red>output_file \n<color:red>start & end
browser <.down. viz #line:red : <color:red>.html


'_______Files_Between_MainParts_______
fetch.data_fetch_decoder --right--> learn.analysis #line:Blue;header:blue : <color:blue>normalized_frames.json
learn --right--> viz #line:Green : <color:green>/tmp/polaris_graph.json


'_______Method_Dependencies_______
polaris <.. fetch.data_fetch_decoder : data_fetch_decode_normalize()
polaris <.. learn.analysis : feature_extraction() \n cross_correlate()
polaris <.. viz.server : launch_webserver()

fetch.data_fetch_decoder <.. fetch.data_fetch_decoder : data_normalize() \n find_satellite() \n load_normalizer()

learn.analysis <.. learn.extraction : extract_best_features() \n create_list_of_transformers()
learn.analysis <.. learn.readers : read_polaris_data()
learn.analysis <.left. learn.writers : heatmap_to_graph()
learn.analysis <.right. learn.cross_correlation : <b>XCorr</b> \n fit()

learn.readers <.. learn.readers : normalize_dataframe() \n records_from_satnogs_frames()
learn.extraction <.. learn.selection : <b>FeatureImportanceOptimization</b>
learn.selection <.. learn.selection : anti_collision_renaming() \n extract_feature_importance() \n filter_importances()


legend right
Creation Date: 05.12.2019
Version: 0.8.1-30-g95a1166
  __ lines        : files
  -- lines         : methods
  <b>bold text</b>  : classes
endlegend
@enduml
